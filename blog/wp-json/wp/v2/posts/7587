{"id":7587,"date":"2024-03-19T06:51:02","date_gmt":"2024-03-19T06:51:02","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=7587"},"modified":"2024-03-19T06:51:02","modified_gmt":"2024-03-19T06:51:02","slug":"python-string-formatting","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/python-string-formatting\/","title":{"rendered":"Python String Formatting"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#how-to-format-strings-in-python\">How to Format Strings in Python?<\/a><\/li><li ><a href=\"#what-are-the-different-ways-for-string-formatting-in-python\">What are the different ways for String Formatting in Python?<\/a><\/li><li ><a href=\"#a-how-to-format-string-using-the-operator-in-python\">a.How to Format String using the % Operator in Python?<\/a><ul><li ><a href=\"#how-to-inject-multiple-strings-using-the-modulo-operator-in-python\">How to Inject Multiple Strings Using the Modulo Operator in Python?<\/a><\/li><li ><a href=\"#how-to-precision-handling-in-python-using-operator\">How to Precision Handling in  Python using % Operator?<\/a><\/li><li ><a href=\"#what-are-multiple-format-conversion-types-in-python\">What are Multiple Format Conversion Types in Python?<\/a><\/li><\/ul><\/li><li ><a href=\"#b-how-to-format-string-using-format-method\">b.How to Format String using format() Method?<\/a><ul><li ><a href=\"#formatting-with-the-string-pythod-using-the-format-method\">Formatting with the String Pythod using the format() Method<\/a><\/li><li ><a href=\"#index-based-insertion\">Index-based Insertion<\/a><\/li><li ><a href=\"#insert-objects-by-assigning-keywords\">Insert Objects by Assigning Keywords<\/a><\/li><li ><a href=\"#reuse-the-inserted-objects\">Reuse the  inserted objects<\/a><\/li><li ><a href=\"#float-precision-with-the-format-method\">Float Precision with the format() Method<\/a><\/li><\/ul><\/li><li ><a href=\"#c-understanding-python-f-string\">c. Understanding Python f-String <\/a><ul><li ><a href=\"#string-formatting-with-f-strings\">String Formatting  with F-Strings<\/a><\/li><li ><a href=\"#how-to-do-arithmetic-operations-using-the-f\">How to do Arithmetic Operations using the F?<\/a><\/li><li ><a href=\"#how-to-do-lambda-expressions-using-f-strings\">How to do Lambda Expressions using F-strings<\/a><\/li><li ><a href=\"#float-precision-in-the-f-string-method\"> Float Precision in the f-String Method<\/a><\/li><\/ul><\/li><li ><a href=\"#d-python-string-template-class\">d. Python String Template Class<\/a><\/li><li ><a href=\"#e-format-string-using-center-method\">e. Format String Using Center () Method<\/a><\/li><li ><a href=\"#conclusion\">Conclusion<\/a><\/li><li ><a href=\"#python-string-formatting-fa-qs\">Python String Formatting- FAQs<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<p>The  String formatting will help you to produce dynamic strings that contain variables and values. Check out this article to learn more about Python String Formatting<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"how-to-format-strings-in-python\">How to Format Strings in Python?<\/h2>\n\n\n\n<p>The <strong>format ()<\/strong> will help you to format the selected parts of the string. However, some parts couldn&#8217;t be controlled. <\/p>\n\n\n\n<p>Thus, to control such <a href=\"https:\/\/www.skillvertex.com\/blog\/which-of-the-following-is-a-value-of-devops\/\" data-type=\"post\" data-id=\"2809\">values<\/a>, you have to add placeholders (curly brackets{} ) in the text and run the values with the format() method.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"what-are-the-different-ways-for-string-formatting-in-python\">What are the different ways for String Formatting in Python?<\/h2>\n\n\n\n<p>The five different ways to operate the <em><a href=\"https:\/\/www.skillvertex.com\/blog\/python-modify-string\/\" data-type=\"post\" data-id=\"7578\">string<\/a><\/em> formatting in Python. These methods are listed below:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Formatting with % <a href=\"https:\/\/www.skillvertex.com\/blog\/precedence-and-associativity-of-operators-in-python\/\" data-type=\"post\" data-id=\"7005\">Operator<\/a>.<\/li>\n\n\n\n<li>Formatting with format() string method.<\/li>\n\n\n\n<li>Formatting with string literals, called f-strings.<\/li>\n\n\n\n<li>Formatting with String Template Class<\/li>\n\n\n\n<li>Formatting with center() row<a href=\"https:\/\/www.skillvertex.com\/blog\/python-string\/\" data-type=\"post\" data-id=\"7475\">Python String<\/a>method.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"a-how-to-format-string-using-the-operator-in-python\">a.How to Format String using the % Operator in Python?<\/h2>\n\n\n\n<p>This is considered the oldest method of string formatting. We use the <strong>modulo % operator.<\/strong> The modulo % is referred to as the <a href=\"https:\/\/www.skillvertex.com\/blog\/compare-string-in-c\/\" data-type=\"post\" data-id=\"961\">string<\/a>-formatting operator.<\/p>\n\n\n\n<p>Python Format String Using the % Operator<\/p>\n\n\n\n<p>Let us look into the example of Python Format String using the % Format.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>name = \"John\"\nage = 25\nheight = 5.8\n\n# Using the % operator for string formatting\nformatted_string = \"My name is %s, I am %d years old, and my height is %.2f feet.\" % (name, age, height)\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>My name is John, I am 25 years old, and my height is 5.80 feet.\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"how-to-inject-multiple-strings-using-the-modulo-operator-in-python\">How to Inject Multiple Strings Using the Modulo Operator in Python?<\/h3>\n\n\n\n<p>Let us check out the example to inject with the % <a href=\"https:\/\/www.skillvertex.com\/blog\/and-operators-in-c\/\" data-type=\"post\" data-id=\"3294\">operator<\/a>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define multiple values\nname = \"Alice\"\nage = 30\ncity = \"Wonderland\"\n\n# Use the % operator to inject multiple strings\nformatted_string = \"Hello, my name is %s, I am %d years old, and I live in %s.\" % (name, age, city)\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, my name is Alice, I am 30 years old, and I live in Wonderland.\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"how-to-precision-handling-in-python-using-operator\">How to Precision Handling in  Python using % Operator?<\/h3>\n\n\n\n<p>The Floating Point numbers will use the format  %abf. Thus,  a   would be considered as the minimum number of digits that is available in the string. But, it will have padded space when the whole number doesn&#8217;t have many digits.<\/p>\n\n\n\n<p>Moreover, bf will display how many digits will be shown after the decimal point.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>%.2f is considered a placeholder for a floating-point number (number), and %.2f  will indicate the number that should be formatted with two decimal places.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define a floating-point number\nnumber = 3.141592653589793\n\n# Use the % operator for precision handling\nformatted_string = \"The value of pi with 2 decimal places: %.2f\" % number\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of pi with 2 decimal places: 3.14\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"what-are-multiple-format-conversion-types-in-python\">What are Multiple Format Conversion Types in Python?<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Define variables with different types\nname = \"Alice\"\nage = 25\nheight = 5.8\n\n# Use the % operator for multiple format conversion types\nformatted_string = \"Name: %s, Age: %d, Height: %.2f\" % (name, age, height)\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name: Alice, Age: 25, Height: 5.80\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"b-how-to-format-string-using-format-method\">b.How to Format String using format() Method?<\/h2>\n\n\n\n<p>The <strong>Format () method <\/strong>was developed with Python 3 for monitoring the complex string formatting more smoothly.<\/p>\n\n\n\n<p>Formatters will perform by putting in one or more replacement fields and placeholders that are defined by the pair of curly braces{} into the string and referred to as the str. format{}.<\/p>\n\n\n\n<p>Syntax<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Syntax: \u2018String here {} then also {}\u2019.format(\u2018something1\u2032,\u2019something2\u2019)\n\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"formatting-with-the-string-pythod-using-the-format-method\">Formatting with the String Pythod using the format() Method<\/h3>\n\n\n\n<p>{} is using this curly braces as the placeholder. Hence, this formatting is done through the format() method that is placed on the equal to the placeholder.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>In the example illustrated below, this<strong> {}<\/strong> is referred to as a placeholder for the variable and the values will be given as arguments to the<strong> format () <\/strong>method. Whereas,  the<strong> {:2f}<\/strong> is the placeholder for the floating-point number(height)  with two decimal places<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define variables with different types\nname = \"Alice\"\nage = 25\nheight = 5.8\n\n# Use the format() method for string formatting\nformatted_string = \"Name: {}, Age: {}, Height: {:.2f}\".format(name, age, height)\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name: Alice, Age: 25, Height: 5.80\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"index-based-insertion\">Index-based Insertion<\/h3>\n\n\n\n<p>The code below will tell us how to perform the index-based insertion into the list in Python<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Initial list\nmy_list = &#91;1, 2, 3, 5]\n\n# Index at which to insert the new element\nindex_to_insert = 3\n\n# Element to insert\nnew_element = 4\n\n# Perform index-based insertion\nmy_list.insert(index_to_insert, new_element)\n\n# Print the updated list\nprint(\"Updated list:\", my_list)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Updated list: &#91;1, 2, 3, 4, 5]\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"insert-objects-by-assigning-keywords\">Insert Objects by Assigning Keywords<\/h3>\n\n\n\n<p>In the example provided below, each object will be represented with keywords such as &#8216;name&#8217;, &#8216;age&#8217;, and &#8216;height&#8217;. So, these dictionaries will be appended to the &#8216;objects_list&#8217;.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Initialize an empty list to store objects\nobjects_list = &#91;]\n\n# Object 1\nobject1 = {'name': 'Alice', 'age': 25, 'height': 5.6}\nobjects_list.append(object1)\n\n# Object 2\nobject2 = {'name': 'Bob', 'age': 30, 'height': 6.1}\nobjects_list.append(object2)\n\n# Print the list of objects\nprint(\"List of Objects:\", objects_list)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>List of Objects: &#91;{'name': 'Alice', 'age': 25, 'height': 5.6}, {'name': 'Bob', 'age': 30, 'height': 6.1}]\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"reuse-the-inserted-objects\">Reuse the  inserted objects<\/h3>\n\n\n\n<p>Let us look into the example below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Initialize an empty list to store objects\nobjects_list = &#91;]\n\n# Object 1\nobject1 = {'name': 'Alice', 'age': 25, 'height': 5.6}\nobjects_list.append(object1)\n\n# Object 2\nobject2 = {'name': 'Bob', 'age': 30, 'height': 6.1}\nobjects_list.append(object2)\n\n# Print the original list of objects\nprint(\"Original List of Objects:\", objects_list)\n\n# Access and modify the inserted objects\nobjects_list&#91;0]&#91;'age'] = 26\nobjects_list&#91;1]&#91;'height'] = 6.2\n\n# Print the modified list of objects\nprint(\"Modified List of Objects:\", objects_list)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original List of Objects: &#91;{'name': 'Alice', 'age': 25, 'height': 5.6}, {'name': 'Bob', 'age': 30, 'height': 6.1}]\nModified List of Objects: &#91;{'name': 'Alice', 'age': 26, 'height': 5.6}, {'name': 'Bob', 'age': 30, 'height': 6.2}]\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"float-precision-with-the-format-method\">Float Precision with the format() Method<\/h3>\n\n\n\n<p>The syntax is given below<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{&#91;index]:&#91;width]&#91;.precision]&#91;type]}\n\nThe type can be used with format codes:\n\n\u2018d\u2019 for integers\n\u2018f\u2019 for floating-point numbers\n\u2018b\u2019 for binary numbers\n\u2018o\u2019 for octal numbers\n\u2018x\u2019 for octal hexadecimal numbers\n\u2018s\u2019 for string\n\u2018e\u2019 for floating-point in an exponent format<\/code><\/pre>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>Check out the example given below for more understanding:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define a floating-point number\npi_value = 3.141592653589793\n\n# Format the float with specific precision using the format() method\nformatted_float = \"The value of pi with 2 decimal places: {:.2f}\".format(pi_value)\n\n# Print the formatted string\nprint(formatted_float)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of pi with 2 decimal places: 3.14\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"c-understanding-python-f-string\">c. Understanding Python f-String <\/h2>\n\n\n\n<p>PEP 498 has developed a new string that has a formatting mechanism known as  Literal String Interpolation. Hence, it is most commonly known as F-Strings. The concept behind the f-string in Python is to make the string Interpolation simpler.<\/p>\n\n\n\n<p>Moreover, to create the f-string in Python, it is required to prefix the string with the letter &#8221;f&#8221;. So, the string itself will be formatted similarly to the str. <strong>format()<\/strong>. F-strings will offer a proper way to embed the Python expression inside the string literals for formatting.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"string-formatting-with-f-strings\">String Formatting  with F-Strings<\/h3>\n\n\n\n<p>Check out the example given below to learn how to format the string with the F-strings.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define variables\nname = \"Alice\"\nage = 25\nheight = 5.8\n\n# Format the string using f-string\nformatted_string = f\"Name: {name}, Age: {age}, Height: {height:.2f}\"\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name: Alice, Age: 25, Height: 5.80\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"how-to-do-arithmetic-operations-using-the-f\">How to do Arithmetic Operations using the F?<\/h3>\n\n\n\n<p>Let us look into the example  given below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define variables\na = 10\nb = 5\n\n# Perform arithmetic operations\nsum_result = a + b\ndifference_result = a - b\nproduct_result = a * b\ndivision_result = a \/ b\n\n# Format the string using f-string with arithmetic operations\nformatted_string = f\"Sum: {sum_result}, Difference: {difference_result}, Product: {product_result}, Division: {division_result:.2f}\"\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sum: 15, Difference: 5, Product: 50, Division: 2.00\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"how-to-do-lambda-expressions-using-f-strings\">How to do Lambda Expressions using F-strings<\/h3>\n\n\n\n<p>Check out the example below to learn more about the Lambda Expressions using the F-strings.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define a lambda function\nsquare = lambda x: x**2\ndouble = lambda x: x*2\n\n# Define a variable\nnumber = 5\n\n# Use f-strings with lambda expressions\nformatted_string = f\"Square of {number} is {square(number)}, Double of {number} is {double(number)}\"\n\n# Print the formatted string\nprint(formatted_string)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Square of 5 is 25, Double of 5 is 10\n<\/code><\/pre>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"float-precision-in-the-f-string-method\"> Float Precision  in the f-String Method<\/h3>\n\n\n\n<p>F-string Formatting will be used to interpolate the value of the num variable into the string.<\/p>\n\n\n\n<p>Syntax<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{value:{width}.{precision}}\n<\/code><\/pre>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>num = 3.14159\n \nprint(f\"The valueof pi is: {num:{1}.{5}}\")<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>The valueof pi is: 3.1416\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"d-python-string-template-class\">d. Python String Template Class<\/h2>\n\n\n\n<p>In Python, there&#8217;s a tool called the <a href=\"https:\/\/www.skillvertex.com\/blog\/what-is-the-largest-size-for-a-resource-manager-template-in-azure\/\" data-type=\"post\" data-id=\"3054\">Template <\/a>class in the &#8216;string&#8217; module. It helps us create sentences with blanks that we can fill in later.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>from string import Template\n\n# Create a sentence template\ntemplate_sentence = Template(\"My name is $name, I am $age years old, and my height is $height feet.\")\n\n# Fill in the blanks with actual information\ninfo = {'name': 'Alice', 'age': 25, 'height': 5.8}\n\n# Put the information into the sentence\nfinal_sentence = template_sentence.substitute(info)\n\n# Show the complete sentence\nprint(final_sentence)\n<\/code><\/pre>\n\n\n\n<p>We have blank spaces represented by $name, $age, and $height. The Template class helps us replace these blanks with real information.<\/p>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"My name is Alice, I am 25 years old, and my height is 5.8 feet.\"\n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"e-format-string-using-center-method\">e. Format String Using Center () Method<\/h2>\n\n\n\n<p>The center() method is referred to as a build-in method in the <a href=\"https:\/\/www.skillvertex.com\/blog\/python-functions\/\" data-type=\"post\" data-id=\"7272\">Python <\/a>str class and will return the new string which is centered within the string of the specified width.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code># Define a string\ntext = \"Hello, Python!\"\n\n# Use the center() method to center-align the string within a width of 20 characters\ncentered_text = text.center(20)\n\n# Print the centered string\nprint(\"Original String:\", text)\nprint(\"Centered String:\", centered_text)\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original String: Hello, Python!\nCentered String:   Hello, Python!  \n<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"conclusion\">Conclusion<\/h2>\n\n\n\n<p>In summary, Python offers multiple ways to format strings, and the choice depends on your preferences, project needs, and the version of Python you&#8217;re using. Focusing on readability ensures that your code is clear and easy to work with.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"python-string-formatting-fa-qs\">Python String Formatting- FAQs<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1709556319126\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1.What is string formatting in Python?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. It is\u00a0the process of inserting a custom string or variable in predefined text<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1709556327349\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What is %s and %d in Python?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. %s &#8211; String is referred to as  any object with a string representation, like numbers)\u00a0%d  is known as Integers.\u00a0%f  is called the Floating point number.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1709556333957\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3.Why is R used in Python?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. The &#8216;r&#8217; prefix when defining a string is particularly helpful when you want to use a backslash as an actual backslash.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>The String formatting will help you to produce dynamic strings that contain variables and values. Check out this article to learn more about Python String Formatting How to Format Strings in Python? The format () will help you to format the selected parts of the string. However, some parts couldn&#8217;t be controlled. Thus, to control &#8230; <a title=\"Python String Formatting\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/python-string-formatting\/\" aria-label=\"More on Python String Formatting\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":7692,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[864],"tags":[960,866],"class_list":["post-7587","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-python-tutorial","tag-python-strings","tag-python-tutorial","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/7587"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=7587"}],"version-history":[{"count":9,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/7587\/revisions"}],"predecessor-version":[{"id":8286,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/7587\/revisions\/8286"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/7692"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=7587"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=7587"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=7587"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}