{"id":3355,"date":"2024-03-06T11:31:47","date_gmt":"2024-03-06T11:31:47","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=3355"},"modified":"2024-03-06T11:31:47","modified_gmt":"2024-03-06T11:31:47","slug":"difference-between-define-and-const-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/difference-between-define-and-const-in-c\/","title":{"rendered":"Difference Between #define And Const In C?"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#difference-between-define-and-const-in-c\">Difference Between #define And Const In C?<\/a><\/li><li ><a href=\"#a-tabular-column-to-show-the-difference-between-define-and-const\">A tabular column to show the difference between #define and const<\/a><\/li><li ><a href=\"#difference-between-define-and-const-in-c-1\">Difference between #define and const in C?<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"difference-between-define-and-const-in-c\">Difference Between #define And Const In C?<\/h2>\n\n\n\n<p> <code>#define<\/code> is basically a preprocessor directive in C that allows you to define macros, and these macros get processed before the actual compilation of your code. This preprocessing step replaces the macros with their values throughout the code, providing advantages such as saving space and speeding up compilation times. <\/p>\n\n\n\n<p>Moreover, Const variables are considered variables and not macro definitions. <code>const<\/code> is checked by the compiler and allows for type-checking, making it safer and more readable than <code>#define<\/code>, which lacks type checking and can lead to potential issues.<\/p>\n\n\n\n<p>Although const are supposed to be variables, it&#8217;s possible to use pointers on them.  Hence, we could typecast, move addresses, and whatever you can do with a  regular variable. The only thing that can&#8217;t done by const is changing the data since the data assigned to the variable is constant.<\/p>\n\n\n\n<p> Hence, const is a much preferable option and we can easily apply the code to it. While there are some scenarios where #define won&#8217;t be replaced by const. Such as #define won&#8217;t be replaced by const. #define could be used to displace some text in the program with another text.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"a-tabular-column-to-show-the-difference-between-define-and-const\">A tabular column to show the difference between #define and const<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>#define <\/strong><\/td><td><strong>const<\/strong><\/td><\/tr><tr><td>#define is basically a preprocessor directive.<\/td><td>Whereas, constants are used in the process of making variables constant. So,  they would never change during the execution.<\/td><\/tr><tr><td>This is capable of defining micro substitution. <\/td><td>Constants are also known as literals.<\/td><\/tr><tr><td>Syntax &#8211; <strong>#define token value&nbsp;<\/strong><\/td><td>Syntax- <strong>const type constant_name;<\/strong><\/td><\/tr><tr><td>#define won&#8217;t be enclosed with a ( ; )semicolon<\/td><td>In contrast, const will be enclosed with a (;) semicolon<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"difference-between-define-and-const-in-c-1\">Difference between #define and const in C?<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1699525891638\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What is the difference between #define and Constexpr?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. <code>#define<\/code> creates macro substitutions, whereas <code>constexpr<\/code> variables are a special type of variable. Despite having nothing in common, before the availability of <code>constexpr<\/code> (or even <code>const<\/code>) variables, macros were sometimes used, a practice now replaced by the use of <code>constexpr<\/code> variables.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1699525910072\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What is the difference between const and constexpr functions?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans.<br \/>Const variables can wait until the program is running to get their values, but constexpr variables need to be set during the time your code is being put together.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1699525914356\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. What are the two types of const?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. Constants are divided into two main groups: primary and secondary. Primary constants include things like character, real, and integer constants. On the other hand, secondary constants include structures, arrays, pointers, unions, and similar things.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>Difference Between #define And Const In C? #define is basically a preprocessor directive in C that allows you to define macros, and these macros get processed before the actual compilation of your code. This preprocessing step replaces the macros with their values throughout the code, providing advantages such as saving space and speeding up compilation &#8230; <a title=\"Difference Between #define And Const In C?\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/difference-between-define-and-const-in-c\/\" aria-label=\"More on Difference Between #define And Const In C?\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":3357,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[564],"class_list":["post-3355","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-difference-between-define-and-const-in-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/3355"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=3355"}],"version-history":[{"count":6,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/3355\/revisions"}],"predecessor-version":[{"id":7942,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/3355\/revisions\/7942"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/3357"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=3355"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=3355"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=3355"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}