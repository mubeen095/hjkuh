{"id":2176,"date":"2024-05-10T07:13:40","date_gmt":"2024-05-10T07:13:40","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=2176"},"modified":"2024-05-10T07:13:40","modified_gmt":"2024-05-10T07:13:40","slug":"tokens-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/tokens-in-c\/","title":{"rendered":"Tokens in C"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#tokens-in-c\">Tokens in C<\/a><\/li><li ><a href=\"#types-of-tokens-in-c\">Types of Tokens in C<\/a><\/li><li ><a href=\"#1-c-token-keywords\">1. C Token \u2013 Keywords<\/a><\/li><li ><a href=\"#2-c-token-identifiers\">2. C Token \u2013 Identifiers<\/a><\/li><li ><a href=\"#3-c-token-constants\">3. C Token \u2013 Constants<\/a><\/li><li ><a href=\"#4-c-token-strings\">4. C Token \u2013 Strings<\/a><\/li><li ><a href=\"#5-c-token-special-symbols\">5. C Token \u2013 Special Symbols<\/a><\/li><li ><a href=\"#6-c-token-operators\">6. C Token \u2013 Operators<\/a><\/li><li ><a href=\"#faq-tokens-in-c\">FAQ- Tokens in C<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"tokens-in-c\">Tokens in C<\/h2>\n\n\n\n<p>In the world of C programming, tokens are like the Lego pieces that make up the language. They are the smallest meaningful parts that the computer understands, like words in a sentence. These tokens include things like special words, names, symbols, and numbers. By understanding these tokens, you can build and work with C programs effectively. So, let&#8217;s take a closer look at these building blocks and how they come together to create your code.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"types-of-tokens-in-c\">Types of Tokens in C<\/h2>\n\n\n\n<p>C Tokens are classified into six depending on the function they do.<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Keywords<\/strong><\/li>\n\n\n\n<li><strong>Identifiers<\/strong><\/li>\n\n\n\n<li><strong>Constants<\/strong><\/li>\n\n\n\n<li><strong>Strings<\/strong><\/li>\n\n\n\n<li><strong>Special Symbols<\/strong><\/li>\n\n\n\n<li><strong>Operators<\/strong><\/li>\n<\/ol>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"1-c-token-keywords\">1. C Token \u2013 Keywords<\/h2>\n\n\n\n<p>Keywords in a programming language are like special commands that the language already knows. Each keyword has a specific job in a program. Since they are reserved for the compiler, we can&#8217;t use them as names for our own variables because that would give them a different job, and that&#8217;s not allowed. You can&#8217;t change what keywords mean. However, you can tell the compiler to replace certain words with other words before the program is compiled using C preprocessor directives. In the C language, there are 32 keywords, each with its own unique function<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>auto         double      int        struct\nbreak        else        long       switch\ncase         enum        register   typedef\nchar         extern      return     union\nconst        float       short      unsigned\ncontinue     for         signed     void\ndefault      goto        sizeof     volatile\ndo           if          static     while<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"2-c-token-identifiers\">2. C Token \u2013 Identifiers<\/h2>\n\n\n\n<p>Identifiers are like custom labels we use for naming things in our program, such as variables, functions, and arrays. These labels are made by users and can be quite long, containing letters and numbers. They must start with a letter or an underscore (_). It&#8217;s essential that the names of identifiers don&#8217;t match any of the reserved keywords because those are already used for special purposes.<\/p>\n\n\n\n<p>Once you give something an identifier name, you can refer to it later in your program. There&#8217;s also a unique type of identifier called a &#8220;statement label&#8221; that&#8217;s used in &#8220;goto&#8221; statements for specific purposes.<\/p>\n\n\n\n<p><strong>Rules for Naming Identifiers<\/strong><\/p>\n\n\n\n<p>When naming identifiers in C, there are specific rules to follow:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>They must start with a letter or an underscore (_).<\/li>\n\n\n\n<li>They can contain only letters, digits, or underscores; no other special characters are allowed.<\/li>\n\n\n\n<li>They cannot be a reserved keyword.<\/li>\n\n\n\n<li>They must not include any white spaces.<\/li>\n\n\n\n<li>They should be no longer than 31 characters, as only the first 31 characters are significant.<\/li>\n<\/ol>\n\n\n\n<p>Adhering to these rules ensures that your identifiers are correctly recognized and processed by the C compiler.<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>main: method name.\na: variable name.<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"3-c-token-constants\">3. C Token \u2013 Constants<\/h2>\n\n\n\n<p>Constants in programming are like unchanging values stored in variables. They work like regular variables, but the key difference is that their values can&#8217;t be changed once they&#8217;re set in the program. These constants can belong to any data type, just like regular variables.<\/p>\n\n\n\n<p><strong>Examples of Constants in C<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>const int c_var = 20;\nconst int* const ptr = &amp;c_var;<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"4-c-token-strings\">4. C Token \u2013 Strings<\/h2>\n\n\n\n<p>In C and C++, strings are essentially arrays of characters, and they will have   a special character called the null character (<code>'\\0'<\/code>)  at the end. This null character marks the end of the string. Strings are enclosed within double quotes, while individual characters are enclosed within single quotes in these programming languages.<\/p>\n\n\n\n<p>Example of string <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>char string&#91;20] = {\u2018g\u2019, \u2019e\u2019, \u2018e\u2019, \u2018k\u2019, \u2018s\u2019, \u2018f\u2019, \u2018o\u2019, \u2018r\u2019, \u2018g\u2019, \u2019e\u2019, \u2018e\u2019, \u2018k\u2019, \u2018s\u2019, \u2018\\0\u2019};\nchar string&#91;20] = \u201cskill vertex\u201d;\nchar string &#91;] = \u201cskill vertex\u201d;<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"5-c-token-special-symbols\">5. C Token \u2013 Special Symbols<\/h2>\n\n\n\n<p>These are some essential symbols and their uses in programming:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Brackets <code>[]<\/code>: Used for array element references, indicating single or multidimensional subscripts.<\/li>\n\n\n\n<li>Parentheses <code>()<\/code>: Indicate function calls and function parameters.<\/li>\n\n\n\n<li>Braces <code>{}<\/code>: Mark the start and end of a code block containing multiple executable statements.<\/li>\n\n\n\n<li>Comma <code>,<\/code>: Separates multiple statements, such as parameters in function calls.<\/li>\n\n\n\n<li>Colon <code>:<\/code>: Invokes an initialization list.<\/li>\n\n\n\n<li>Semicolon <code>;<\/code>: Serves as a statement terminator, marking the end of a logical entity. Each statement must end with a semicolon.<\/li>\n\n\n\n<li>Asterisk <code>*<\/code>: Used to create pointer variables and for multiplication.<\/li>\n\n\n\n<li>Assignment operator <code>=<\/code>: Assigns values and performs logical operations.<\/li>\n\n\n\n<li>Pre-processor <code>#<\/code>: Automatically transforms your program before actual compilation.<\/li>\n\n\n\n<li>Period <code>.<\/code>: Accesses members of a structure or union.<\/li>\n\n\n\n<li>Tilde <code>~<\/code>: Used as a destructor to free memory space.<\/li>\n<\/ol>\n\n\n\n<p>These symbols play crucial roles in programming languages, helping programmers write clear and efficient code.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"6-c-token-operators\">6. C Token \u2013 Operators<\/h2>\n\n\n\n<p>Operators in programming are symbols that perform specific actions when applied to variables and other objects. The objects on which operators operate are known as operands.<\/p>\n\n\n\n<p>Operators can be categorized based on the number of operands they require:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li><strong>Unary Operators<\/strong>: These operators work with a single operand. Examples include increment and decrement operators.<\/li>\n\n\n\n<li><strong>Binary Operators<\/strong>: Binary operators work with two operands. They can be further divided into categories like arithmetic, relational, logical, assignment, and bitwise operators.<\/li>\n\n\n\n<li><strong>Ternary Operator<\/strong>: The ternary operator is a special case that works with three operands. It&#8217;s often referred to as the conditional operator and is represented by <code>?<\/code>.<\/li>\n<\/ol>\n\n\n\n<p>These operators are fundamental tools in programming, allowing developers to perform various operations on data and make decisions within their code.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-tokens-in-c\">FAQ- Tokens in C<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1695811059148\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. What are the tokens in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. In a C program, a token is the tiniest unit of code. It encompasses every punctuation mark and word you encounter in the program. When the compiler processes a C program, it breaks it down into these tokens as the initial step in the compilation process. These tokens serve as the building blocks that the compiler uses to understand and analyze the code further.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1695811072982\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. What type of word is a token?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. A token can also refer to a specific occurrence of a word, symbol, expression, sentence, or similar element within a larger context. For example, in a printed page, you might find multiple instances or occurrences of the same word, like &#8220;and.&#8221; This usage of &#8220;token&#8221; helps identify and count individual occurrences of elements within a set, similar to how you might compare types or categories.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1695811080233\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. How to separate tokens in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. The <code>strtok()<\/code> function in C is used to split a string (<code>str[]<\/code>) into tokens based on specified delimiters. It returns the next token on each call and should be used in a loop to retrieve all tokens. When there are no more tokens, it returns <code>NULL<\/code>.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>Tokens in C In the world of C programming, tokens are like the Lego pieces that make up the language. They are the smallest meaningful parts that the computer understands, like words in a sentence. These tokens include things like special words, names, symbols, and numbers. By understanding these tokens, you can build and work &#8230; <a title=\"Tokens in C\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/tokens-in-c\/\" aria-label=\"More on Tokens in C\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":5324,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[384],"class_list":["post-2176","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","tag-tokens-in-c","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2176"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=2176"}],"version-history":[{"count":11,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2176\/revisions"}],"predecessor-version":[{"id":10634,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2176\/revisions\/10634"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/5324"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=2176"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=2176"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=2176"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}